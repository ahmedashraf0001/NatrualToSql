// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalToQuery.Infrastructure.Persistence;

#nullable disable

namespace NaturalToQuery.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20250904150142_addeduser")]
    partial class addeduser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheFile")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Provider")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecretRef")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserInfoId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.HasIndex("UserInfoId1");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.Queries.Query", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SqlQuery")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserQuery")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.UserInfos.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("NaturalToQuery.Core.Contributers.Entities.UserInfos.UserInfo", null)
                        .WithMany("Profiles")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaturalToQuery.Core.Contributers.Entities.UserInfos.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.Queries.Query", b =>
                {
                    b.HasOne("NaturalToQuery.Core.Contributers.Entities.Profiles.Profile", "Profile")
                        .WithMany("Queries")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.Profiles.Profile", b =>
                {
                    b.Navigation("Queries");
                });

            modelBuilder.Entity("NaturalToQuery.Core.Contributers.Entities.UserInfos.UserInfo", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
